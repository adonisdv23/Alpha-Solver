#!/usr/bin/env python3
import argparse, os, sys
TEMPLATE = """# CODE SPEC — {id} · {title} ({track})

## Goal
{goal}

## Acceptance Criteria (must all pass)
{accept}

## Code Targets
{targets}

## Template
{template}

## Notes
- Generated by SpecKit shim.
"""

def main():
    p = argparse.ArgumentParser()
    sub = p.add_subparsers(dest="cmd", required=True)

    e = sub.add_parser("emit")
    e.add_argument("--id", required=True)
    e.add_argument("--track", required=True)
    e.add_argument("--title", required=True)
    e.add_argument("--accept", required=True)
    e.add_argument("--targets", required=True, help="semicolon-separated list")
    e.add_argument("--template", default="generic_v1")
    e.add_argument("--out", required=True)

    args = p.parse_args()
    if args.cmd == "emit":
        os.makedirs(os.path.dirname(args.out), exist_ok=True)
        targets = "\n".join([f"- {t.strip()}" for t in args.targets.split(";") if t.strip()])
        body = TEMPLATE.format(
            id=args.id.strip(),
            title=args.title.strip(),
            track=args.track.strip(),
            goal=f"Implement {args.title.strip()} in track {args.track.strip()} with enforceable tests.",
            accept=args.accept.strip(),
            targets=targets,
            template=args.template.strip(),
        )
        with open(args.out, "w") as f: f.write(body)
        print(f"Wrote {args.out}")
    else:
        p.error("unknown command")

if __name__ == "__main__":
    sys.exit(main())
